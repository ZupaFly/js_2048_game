{"version":3,"sources":["scripts/main.js"],"names":["cellsAll","document","querySelectorAll","gameScore","gameScoreDisplay","querySelector","gameOver","applyCellStyles","cell","value","textContent","className","classList","add","randomizer","emptyCells","fillEmptyCell","length","randomIndex","randomCell","Math","floor","random","setTimeout","remove","Array","from","filter","trim","slideAndMerge","row","result","val","concat","fill","i","parseInt","toString","moveCells","direction","cellsFilled","map","moved","updateCells","startIndex","increment","reverse","push","movedRow","forEach","idx","checkGameOver","j","resetGame","button","addEventListener","event","key","startX","startY","element","preventDefault","touch","touches","clientX","clientY","deltaX","deltaY","abs","changedTouches","endX","endY"],"mappings":"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","file":"main.61eb4c3d.js","sourceRoot":"..\\src","sourcesContent":["/* eslint-disable no-shadow */\n'use strict';\n\nconst cellsAll = document.querySelectorAll('.game-field .field-cell');\n\nlet gameScore = 0;\nconst gameScoreDisplay = document.querySelector('.game-score');\nlet gameOver = false;\n\nconst applyCellStyles = (cell) => {\n  const value = cell.textContent;\n\n  cell.className = 'field-cell';\n\n  if (value) {\n    cell.classList.add(`field-cell--${value}`);\n  }\n};\n\nconst randomizer = () => {\n  const emptyCells = fillEmptyCell();\n\n  if (emptyCells.length === 0) {\n    return;\n  };\n\n  const randomIndex = Math.floor(Math.random() * emptyCells.length);\n  const randomCell = emptyCells[randomIndex];\n  const random = Math.random();\n\n  if (random < 0.9) {\n    randomCell.textContent = '2';\n    randomCell.classList.add(`field-cell--2`);\n  } else {\n    randomCell.textContent = '4';\n    randomCell.classList.add(`field-cell--4`);\n  }\n\n  randomCell.classList.add(`animate`);\n\n  setTimeout(() => {\n    randomCell.classList.remove('animate');\n  }, 200);\n};\n\nconst fillEmptyCell = () =>\n  Array.from(cellsAll).filter(cell => !cell.textContent.trim());\n\nconst slideAndMerge = (row) => {\n  // Filter out empty values, shift values to left, and pad with empty strings\n  const result\n    = row.filter(val => val !== '').concat(Array(4 - row.length).fill(''));\n\n  for (let i = 0; i < result.length - 1; i++) {\n    if (result[i] !== '' && result[i] === result[i + 1]) {\n      result[i] = (parseInt(result[i]) * 2).toString();\n      result[i + 1] = '';\n      gameScore += parseInt(result[i]);\n      gameScoreDisplay.textContent = gameScore;\n      i++;\n    }\n  }\n\n  // Filter again and add empty strings to the end for completed row\n  return result.filter(val => val !== '')\n    .concat(Array(4 - result.filter(val => val !== '').length).fill(''));\n};\n\n// Move the cells in a specified direction and merge them\nconst moveCells = (direction) => {\n  const cellsFilled = Array.from(cellsAll).map(cell => cell.textContent.trim());\n  let moved = false;\n\n  const updateCells = (startIndex, increment, reverse = false) => {\n    let row = [];\n\n    for (let i = 0; i < 4; i++) {\n      row.push(cellsFilled[startIndex + i * increment]);\n    };\n\n    if (reverse) {\n      row = row.reverse();\n    };\n\n    const movedRow = slideAndMerge(row);\n\n    if (reverse) {\n      movedRow.reverse();\n    };\n\n    // Update the original array with the moved row\n    for (let i = 0; i < 4; i++) {\n      if (cellsFilled[startIndex + i * increment] !== movedRow[i]) {\n        moved = true;\n      };\n      cellsFilled[startIndex + i * increment] = movedRow[i];\n    }\n  };\n\n  if (direction === 'left' || direction === 'right') {\n    for (let i = 0; i < 4; i++) {\n      const startIndex = i * 4;\n\n      updateCells(startIndex, 1, direction === 'right');\n    }\n  } else if (direction === 'up' || direction === 'down') {\n    for (let i = 0; i < 4; i++) {\n      updateCells(i, 4, direction === 'down');\n    }\n  }\n\n  // Update cells with new values\n  cellsAll.forEach((cell, idx) => {\n    cell.textContent = cellsFilled[idx] || '';\n    applyCellStyles(cell);\n\n    if (cell.textContent === '2048') {\n      document.querySelector('.message-win').classList.remove('hidden');\n    }\n  });\n\n  if (moved) {\n    randomizer();\n  };\n};\n\nconst checkGameOver = () => {\n  if (fillEmptyCell().length > 0) {\n    return false;\n  };\n\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (cellsAll[i * 4 + j]\n        .textContent === cellsAll[i * 4 + j + 1].textContent) {\n        return false;\n      };\n\n      if (cellsAll[j * 4 + i]\n        .textContent === cellsAll[(j + 1) * 4 + i].textContent) {\n        return false;\n      };\n    }\n  }\n\n  return true;\n};\n\nconst resetGame = () => {\n  cellsAll.forEach(cell => {\n    cell.textContent = '';\n    cell.className = 'field-cell';\n  });\n  gameScore = 0;\n  gameScoreDisplay.textContent = gameScore;\n  gameOver = false;\n  randomizer();\n  randomizer();\n\n  const button = document.querySelector('button');\n\n  button.textContent = 'Restart';\n  button.classList.remove('start');\n  button.classList.add('restart');\n\n  document.querySelector('.message-start').classList.add('hidden');\n  document.querySelector('.message-lose').classList.add('hidden');\n  document.querySelector('.message-win').classList.add('hidden');\n};\n\n// eslint-disable-next-line no-shadow\ndocument.addEventListener('keydown', (event) => {\n  if (gameOver) {\n    return;\n  };\n\n  if (event.key === 'ArrowRight') {\n    moveCells('right');\n  } else if (event.key === 'ArrowLeft') {\n    moveCells('left');\n  } else if (event.key === 'ArrowUp') {\n    moveCells('up');\n  } else if (event.key === 'ArrowDown') {\n    moveCells('down');\n  }\n\n  if (checkGameOver()) {\n    gameOver = true;\n    document.querySelector('.message-lose').classList.remove('hidden');\n  }\n});\n\ndocument.querySelector('.start').addEventListener('click', resetGame);\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  let startX = 0;\n  let startY = 0;\n\n  const element = document.querySelector('.game-field');\n\n  element.addEventListener('touchstart', (event) => {\n    event.preventDefault();\n\n    const touch = event.touches[0];\n\n    startX = touch.clientX;\n    startY = touch.clientY;\n  });\n\n  element.addEventListener('touchmove', (event) => {\n    const touch = event.touches[0];\n    const deltaX = touch.clientX - startX;\n    const deltaY = touch.clientY - startY;\n\n    // Prevent default behavior for downward swipe\n    if (deltaY > 0 && Math.abs(deltaY) > Math.abs(deltaX)) {\n      event.preventDefault();\n    }\n  });\n\n  element.addEventListener('touchend', (event) => {\n    const touch = event.changedTouches[0];\n    const endX = touch.clientX;\n    const endY = touch.clientY;\n\n    const deltaX = endX - startX;\n    const deltaY = endY - startY;\n\n    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n      if (Math.abs(deltaX) > 20) {\n        if (deltaX > 0) {\n          moveCells('right');\n        } else {\n          moveCells('left');\n        }\n      }\n    } else {\n      if (Math.abs(deltaY) > 20) {\n        if (deltaY > 0) {\n          moveCells('down');\n        } else {\n          moveCells('up');\n        }\n      }\n    }\n  });\n});\n"]}